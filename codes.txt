------------------------------------------------------------------------------------------
//volatile and cache coherence
package ua.od.atomspace;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
	MyThread thread = new MyThread();
	thread.start();

	Scanner scanner = new Scanner(System.in);
	scanner.nextLine();
	thread.shutDown();
    }
}
class MyThread extends Thread {
    private volatile boolean running = true;

    public void run(){
        while (running){
            System.out.println("Hello");
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    public void shutDown(){
        this.running=false;
    }
}
------------------------------------------------------------------------------------------
//synchronized keyword with monitor
package ua.od.atomspace;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Main {

    public static void main(String[] args) {
        new Worker().main();
    }
}

class Worker {
    Random random = new Random();

    final Object lock1 = new Object();
    final Object lock2 = new Object();

    final private List<Integer> list1 = new ArrayList<>();
    final private List<Integer> list2 = new ArrayList<>();

    private void addToList1() {
        synchronized (lock1) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            list1.add(random.nextInt(100));
        }
    }

    private void addToList2() {
        synchronized (lock2) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            list2.add(random.nextInt(100));
        }
    }

    private void work() {
        for (int i = 0; i < 1000; i++) {
            addToList1();
            addToList2();
        }
    }

    public void main() {
        long before = System.currentTimeMillis();
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                work();
            }
        });
        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                work();
            }
        });
        thread1.start();
        thread2.start();

        try {
            thread2.join();
            thread1.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        long after = System.currentTimeMillis();
        System.out.println("Program took " + (after - before) + " ms to run");
        System.out.println("List 1 = " + list1.size());
        System.out.println("List 2 = " + list2.size());
    }
}
------------------------------------------------------------------------------------------
//ThreadPool
package ua.od.atomspace;

import java.util.concurrent.*;

public class Main {
    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(5);
        for (int i = 0; i < 5; i++){
            executorService.submit(new Work(i));
        }
        executorService.shutdown();
        System.out.println("All tasks submitted");
        try {
            executorService.awaitTermination(1,TimeUnit.DAYS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class Work implements Runnable{
    private int id;

    public Work(int id) {
        this.id = id;
    }

    @Override
    public void run() {
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Work "+id+" was completed");
    }
}
------------------------------------------------------------------------------------------
//Producer and Consumer pattern by BlockingQueue
package ua.od.atomspace;

import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class Main {
    private static BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);
    public static void main(String[] args) throws InterruptedException {
        Thread producer = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    produce();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        Thread consumer = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    consume();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        producer.start();
        consumer.start();
        producer.join();
        consumer.join();
    }
    private static void produce()throws InterruptedException{
        Random random = new Random();
        while (true){
            queue.put(random.nextInt(100));
        }
    }
    private static void consume()throws InterruptedException{
        Random random = new Random();
        while (true){
            Thread.sleep(100);
            if (random.nextInt(10)==5){
                System.out.println(queue.take());
                System.out.println("Queue size is "+queue.size());
            }
        }
    }
}
------------------------------------------------------------------------------------------
//Producer and Consumer pattern by wait&notify
package ua.od.atomspace;

import java.util.LinkedList;
import java.util.Queue;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        ProducerConsumer pc = new ProducerConsumer();

        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    pc.produce();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    pc.consume();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        thread1.start();
        thread2.start();

        thread1.join();
        thread2.join();

    }
}

class ProducerConsumer {
    private Queue<Integer> queue = new LinkedList<>();
    private final int LIMIT = 10;
    private final Object lock = new Object();

    public void produce() throws InterruptedException {
        int value = 0;
        while (true) {
            synchronized (lock) {
                while (queue.size() == LIMIT) {
                    lock.wait();
                }
                queue.add(value++);
                lock.notify();
            }
        }
    }

    public void consume() throws InterruptedException {
        while (true) {
            synchronized (lock) {
                while (queue.isEmpty()) {
                    lock.wait();
                }
                int value = queue.poll();
                System.out.println(value);
                System.out.println("Queue size is " + queue.size());
                lock.notify();
            }
            Thread.sleep(1000);
        }
    }
}
------------------------------------------------------------------------------------------
//CountDownLatch
package ua.od.atomspace;

import java.util.Timer;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Main {

    public static void main(String[] args) throws InterruptedException {
        long startTime = System.currentTimeMillis();
        CountDownLatch countDownLatch = new CountDownLatch(3);
        ExecutorService executorService = Executors.newFixedThreadPool(3);

        for (int i=0;i<3;i++)
            executorService.submit(new Processor(countDownLatch,i));
        executorService.shutdown();

        for(int i=0;i<3;i++){
            Thread.sleep(1000);
            countDownLatch.countDown();
        }
        long endTime = System.currentTimeMillis();
        System.out.println("Program took "+(endTime- startTime)+" ms");

    }
}

class Processor implements Runnable{
    private CountDownLatch countDownLatch;
    private int id;

    public Processor(CountDownLatch countDownLatch, int id) {
        this.countDownLatch = countDownLatch;
        this.id = id;
    }

    @Override
    public void run() {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Process with id "+id+" proceeded!");
    }
}
------------------------------------------------------------------------------------------
//ReentrantLock
package ua.od.atomspace;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Main {

    public static void main(String[] args) {
        Task task = new Task();
        Thread thread1 = new Thread(
                new Runnable() {
                    @Override
                    public void run() {
                        task.firstThread();
                    }
                }
        );
        Thread thread2 = new Thread(
                new Runnable() {
                    @Override
                    public void run() {
                        task.secondThread();
                    }
                }
        );
        thread1.start();
        thread2.start();

        try {
            thread1.join();
            thread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        task.showCounter();
    }
}

class Task {
    private int counter;
    Lock lock = new ReentrantLock();

    private void increment() {
        counter++;
    }

    public void firstThread() {
        for (int i = 0; i < 10_000; i++) {
            lock.lock();
            try {
                increment();
            } finally {
                lock.unlock();
            }
        }
    }

    public void secondThread() {
        for (int i = 0; i < 10_000; i++) {
            lock.lock();
            try {
                increment();
            } finally {
                lock.unlock();
            }
        }
    }

    public void showCounter() {
        System.out.println("Counter = " + counter);
    }
}
------------------------------------------------------------------------------------------
//Semaphore and Singletone pattern
package ua.od.atomspace;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class Main {

    public static void main(String[] args) throws InterruptedException {
        ExecutorService executorService = Executors.newFixedThreadPool(200);
        Connection connection = Connection.getConnection();
        for (int i = 0; i < 200; i++) {
            executorService.submit(new Runnable() {
                @Override
                public void run() {
                    try {
                        connection.work();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            });
        }
        executorService.shutdown();
        executorService.awaitTermination(1, TimeUnit.DAYS);

    }
}

class Connection {
    private static Connection connection = new Connection();
    private Semaphore semaphore = new Semaphore(10);

    private Connection() {

    }

    private int connectionsCount;

    public static Connection getConnection() {
        return connection;
    }

    public void work() throws InterruptedException {
        semaphore.acquire();
        try {
            doWork();
        } finally {
            semaphore.release();
        }
    }

    private void doWork() throws InterruptedException {
        synchronized (this) {
            connectionsCount++;
            System.out.println(connectionsCount);
        }
        Thread.sleep(5000);
        synchronized (this) {
            connectionsCount--;
        }
    }
}
------------------------------------------------------------------------------------------
//deadlock situation and fixing by ReentrantLock
package ua.od.atomspace;

import java.util.Random;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Main {

    public static void main(String[] args) throws InterruptedException {
        Runner runner = new Runner();
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                runner.firstThread();
            }
        });
        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                runner.secondThread();
            }
        });
        thread1.start();
        thread2.start();

        thread1.join();
        thread2.join();

        runner.finished();
    }
}

class Runner {
    Account acc1 = new Account();
    Account acc2 = new Account();

    Lock lock1 = new ReentrantLock();
    Lock lock2 = new ReentrantLock();

    private void takeLock(Lock lock1, Lock lock2) {
        boolean firstLockTaken = false;
        boolean secondLockTaken = false;
        while (true) {
            try {
                firstLockTaken = lock1.tryLock();
                secondLockTaken = lock2.tryLock();
            } finally {
                if (firstLockTaken && secondLockTaken) {
                    return;
                }
                if (firstLockTaken) {
                    lock1.unlock();
                }
                if (secondLockTaken) {
                    lock2.unlock();
                }
            }
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public void firstThread() {
        Random random = new Random();
        for (int i = 0; i < 10_000; i++) {
            takeLock(lock1, lock2);
            try {
                Account.transfer(acc1, acc2, random.nextInt(100));
            } finally {
                lock1.unlock();
                lock2.unlock();
            }
        }
    }

    public void secondThread() {
        Random random = new Random();
        for (int i = 0; i < 10_000; i++) {
            takeLock(lock2, lock1);
            try {
                Account.transfer(acc2, acc1, random.nextInt(100));
            } finally {
                lock1.unlock();
                lock2.unlock();
            }
        }
    }

    public void finished() {
        System.out.println("Balance of first account = " + acc1.getBalance());
        System.out.println("Balance of second account = " + acc2.getBalance());
        System.out.println("Total balance = " + (acc1.getBalance() + acc2.getBalance()));
    }
}

class Account {
    private int balance = 10_000;

    public void deposit(int amount) {
        balance += amount;
    }

    public void withdraw(int amount) {
        balance -= amount;
    }

    public int getBalance() {
        return balance;
    }

    public static void transfer(Account acc1, Account acc2, int amount) {
        acc1.withdraw(amount);
        acc2.deposit(amount);
    }
}
------------------------------------------------------------------------------------------
//InterruptedException 

package ua.od.atomspace;

import java.util.Random;

public class Main {

    public static void main(String[] args) throws InterruptedException {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                Random random = new Random();
                for (int i = 0; i < 1_000_000_000; i++) {
                    try {
                        Thread.currentThread().sleep(150);
                    } catch (InterruptedException e) {
                        System.out.println("Thread was interrupted!");
                        break;
                    }

//                    if(Thread.currentThread().isInterrupted()){
//                        System.out.println("Thread was interrupted!");
//                        break;
//                    }
                    System.out.println(Math.sin(random.nextDouble()));
                }
            }
        });
        System.out.println("Starting thread...");
        thread.start();
        Thread.sleep(1000);
        thread.interrupt();
        thread.join();
        System.out.println("Thread was finished!");
    }
} 
------------------------------------------------------------------------------------------
//Callable and Future
package ua.od.atomspace;

import java.util.Random;
import java.util.concurrent.*;

public class Main {

    public static void main(String[] args) {
//        Callable task = () -> {
//            return "Hello, World!";
//        };
//        FutureTask<String> future1 = new FutureTask<>(task);
//        new Thread(future1).start();
//        System.out.println(future1.get());

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future2 = executorService.submit(
                new Callable<Integer>() {
                    @Override
                    public Integer call() throws Exception {
                        System.out.println("Starting..");
                        Thread.sleep(500);
                        Random random = new Random();
                        int randomValue = random.nextInt(10);
                        if (randomValue < 5) {
                            throw new Exception("Num < 5");
                        }
                        return randomValue;
                    }
                }
        );
        executorService.shutdown();
        try {
            int result = future2.get();
            System.out.println(result);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            Throwable ex = e.getCause();
            System.out.println(ex.getMessage());
        }

    }
}
------------------------------------------------------------------------------------------
